Developing a node rest api using typescript.

npm init

npm install --save express debug winston express-winston cors


debug is a module that we will use to avoid calling console.log() while developing our application. 
This way, we can easily filter debug statements during troubleshooting. 

They can also be switched off entirely in production instead of having to be removed manually.
winstonis responsible for logging requests to our API and the responses (and errors) returned. 

express-winston integrates directly with Express.js, so that all standard API-related winston logging 
code is already done. 

cors is a piece of Express.js middleware that allows us to enable cross-origin resource sharing. 
Without this, our API would only be usable from front ends being served from the exact same subdomain 
as our back end.

We start with npm init and install the packages below

npm install --save express debug winston express-winston cors

Our back end uses these packages when it’s running. But we also need to install some development 
dependencies for our TypeScript configuration. For that, we’ll run:

npm install --save-dev @types/cors @types/express @types/debug source-map-support tslint typescript

These dependencies are required to enable TypeScript for our app’s own code, along with the types 
used by Express.js and other dependencies. This can save a lot of time when we’re using an 
IDE like WebStorm or VSCode by allowing us to complete some function methods automatically 
while coding.

we are going to create just three files:

./app.ts
./common/common.routes.config.ts
./users/users.routes.config.ts

The idea behind the project structure’s two folders (common and users) is to have individual modules 
that have their own responsibilities. In this sense, we are eventually going to have some or all of 
the following for each module:

Route configuration to define the requests our API can handle Services for tasks such as connecting to our database 
models, doing queries, or connecting to external services that are required by the specific request Middleware for
running specific request validations before the final controller of a route handles its specifics Models for defining 
data models matching a given database schema, to facilitate data storage and retrieval Controllers for separating the 
route configuration from the code that finally (after any middleware) processes a route request, calls the above service 
functions if necessary, and gives a response to the client

http is a Node.js-native module. It’s required to start our Express.js application.

body-parser is middleware that comes with Express.js. It parses the request (in our case, as JSON) 
before control goes to our own request handlers.

Updating package.json to Transpile TypeScript to JavaScript and Run the App

REST API Services, Middleware, Controllers, and Models

Services that make our code cleaner by encapsulating business logic operations into functions that middleware 
and controllers can call. Middleware that will validate prerequisite conditions before Express.js calls the 
appropriate controller function. Controllers that use services to process the request before finally sending
a response to the requester. Models that describe our data and aid in compile-time checks.

That one-letter difference between acronyms is essential: A DAO is responsible for connecting to a defined 
database and performing CRUD operations;  a DTO is an object that holds the raw data that the DAO will send 
to—and receive from—the database.


npm i --save shortid
npm i --save-dev @types/shortid


npm i --save argon2 
for password hashing

curl --location --request POST 'localhost:3000/users' \
--header 'Content-Type: application/json' \
--data-raw '{
   "email": "marcos.henrique@toptal.com",
   "password": "sup3rS3cr3tPassw0rd!23"
}'

or postman in the raw and change to JSON

{
     "email": "kachi@kachi.com",
     "password": "sup3rS3cr3tPassw0rd!24"
}

localhost:3000/users/BxChDCU6d   // for single request

Update

curl --location --request PUT "localhost:3000/users/$REST_API_EXAMPLE_ID" \
--header 'Content-Type: application/json' \
--data-raw '{
    "email": "kachi@kachi.com",
    "password": "sup3rS3cr3tPassw0rd!24",
    "firstName": "Onyekachi",
    "lastName": "Stanley",
    "permissionLevel": 8
}'

from postman   localhost:3000/users/HzzkVWgOa
{
    "email": "kachi@kachi.com",
    "password": "sup3rS3cr3tPassw0rd!24",
    "firstName": "Onyekachi",
    "lastName": "Stanley",
    "permissionLevel": 8
}

DELETE
localhost:3000/users/HzzkVWgOa

PATCH
localhost:3000/users/HzzkVWgOa
{
    "lastName": "Stan"
}

PUT
localhost:3000/users/HzzkVWgOa
{
    "email": "kachi@kachi.com",
    "password": "sup3rS3cr3tPassw0rd!24",
    "firstName": "Onyekachi",
    "lastName": "Stanley",
    "permissionLevel": 8
}

GET BY ID
localhost:3000/users/HzzkVWgOa

GET ALL USERS
localhost:3000/users